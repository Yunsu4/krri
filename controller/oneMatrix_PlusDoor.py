import pandas as pd


# -------------- 문별 승차 인원까지 구한 하나의 O-D Matrix


# 표에서 R1, R2 부분을 채우기 위해 합치는 함수
def R12_controller(R2):

    # 출발통행이 될 부분을 추가하고 모두 0으로 채우기
    for exitNum in range(1,16):
        col_name=f'{exitNum}'
        R2[col_name] = 0
    
    R2['9-1'] = 0

    return R2



# 표에서 R4, R5 부분을 채우기 위해 합치는 함수
def R45_controller(R4, R5):

    # R4, R5 데이터프레임을 platform 기준으로 합치기
    result = pd.merge(R4, R5, on='platform', how='outer')    

    # platform 컬럼의 중복이 있다면 없애기
    result = result.loc[:, ~result.columns.duplicated()]

    return result




# 하나의 od Matrix를 반환하는 함수

def oneMatrix_controller(R2, R4, R5):

    # R1, R2, R4, R5를 가져오기
    R12 = R12_controller(R2)
    R45 = R45_controller(R4, R5)



    result = pd.concat([R12, R45], ignore_index = True) # R1, R2, R4, R5를 합치기
    
    # R12의 경우 exit, R45의 경우 platform 열을 가지고 있고, 이외에는 모두 동일
    # 하나의 O-D Matrix를 만들기 위해 '출발지/목적지' 열을 만들고 exit, platform 열을 위 아래로 결합
    result['출발지/목적지'] = pd.concat([R12['exit'], R45['platform']], ignore_index = True)
    result = result.drop(columns= ['exit','platform'])# exit, platform 열 삭제
    result = result[['출발지/목적지'] + [col for col in result.columns if col != '출발지/목적지']] # 열 정렬

    

    # 칸별로 표기된 열을 문별로 표기하도록 계산하는 함수
    def split_columns(df, keep_as_is_cols=None):

        # keep_as_is_cols 가 없다면 빈 리스트 출력
        if keep_as_is_cols is None:
            keep_as_is_cols = []
        

        # 새로운 열들을 담을 딕셔너리 생성 
        new_columns = {}

        # 기존 데이터프레임의 모든 열 중 keep_as_is_cols 제외하고 - 가 포함된 열인 경우 
        # 열 이름을 수정하고 그 데이터를 4로 나누어 new_columns에 추가
        for col in df.columns:
            if '-' in col and col not in keep_as_is_cols: 
                for i in range(1, 5):
                    new_col_name = f"{col}-{i}" # 1-1 열의 경우 1-1-1과 같은 형태로 수정
                    new_columns[new_col_name] = df[col] / 4

        # 새로운 열들로 새로운 데이터프레임을 생성
        new_df = pd.concat([df.drop(columns=[col for col in df.columns if '-' in col]), pd.DataFrame(new_columns)], axis=1)


        # 새로운 데이터프레임에  keep_as_is_df 열을 추가
        keep_as_is_df = df[keep_as_is_cols]
        new_df = pd.concat([new_df, keep_as_is_df], axis=1)

        return new_df
    

    # 칸별로 표기된 행을 문별로 표기하도록 계산하는 함수
    def split_rows(df, keep_as_is_vals=None):

        # keep_as_is_cols 가 없다면 빈 리스트 출력
        if keep_as_is_vals is None:
            keep_as_is_vals = []


        # 새로운 행들을 담을 리스트 생성 
        new_rows = []


        # '출발지/목적지' 컬럼 내의 모든 행을 돌면서 keep_as_is_cols 제외하고 - 가 포함된 행인 경우
        # '출발지/목적지' 컬럼 내의 데이터 이름을 수정하고 해당 행의 모든 열의 데이터를 4로 나누어 new_rows에 추가
        for _, row in df.iterrows():
            origin_destination = row['출발지/목적지']
            if '-' in origin_destination and origin_destination not in keep_as_is_vals:
                for i in range(1, 5):
                    new_row = {'출발지/목적지': f"{origin_destination}-{i}"}  # 새로운 출발지/목적지 값 생성
                    for col in df.columns:
                        if col != '출발지/목적지':
                            new_row[col] = row[col] / 4  # 해당하는 행의 모든 열의 값을 4로 나누어 할당

                    new_rows.append(new_row) # 생성한 새로운 행 new_row를 new_rows 리스트에 추가
            else:
                # '-'이 포함되지 않은 '출발지/목적지'는 그대로 추가
                new_rows.append(row.to_dict())

        # 새로운 DataFrame 생성
        new_result = pd.DataFrame(new_rows)


        return new_result





    # 행, 열 기준으로 나눈 DataFrame (9-1 출구는 4로 나누지 않음)
    result_of_split_rows = split_rows(result, keep_as_is_vals=['9-1'])
    new_result = split_columns(result_of_split_rows, keep_as_is_cols=['9-1'])


    # 최종적으로 표에 표시될 열 이름
    column_renames = {
        '출발지/목적지': 'M00000', '1': 'E00010', '2': 'E00020', '3': 'E00030', '4': 'E00040', 
        '5': 'E00050', '6': 'E00060', '7': 'E00070', '8': 'E00080', '9': 'E00090', '9-1': 'E00091', 
        '10': 'E00100', '11': 'E00110', '12': 'E00120', '13': 'E00130', '14': 'E00140', '15': 'E00150',
        '1-1-1': 'T11011', '1-1-2': 'T11012', '1-1-3': 'T11013', '1-1-4': 'T11014',
        '1-2-1': 'T11021', '1-2-2': 'T11022', '1-2-3': 'T11023', '1-2-4': 'T11024',
        '1-3-1': 'T11031', '1-3-2': 'T11032', '1-3-3': 'T11033', '1-3-4': 'T11034',
        '1-4-1': 'T11041', '1-4-2': 'T11042', '1-4-3': 'T11043', '1-4-4': 'T11044',
        '1-5-1': 'T11051', '1-5-2': 'T11052', '1-5-3': 'T11053', '1-5-4': 'T11054',
        '1-6-1': 'T11061', '1-6-2': 'T11062', '1-6-3': 'T11063', '1-6-4': 'T11064',
        '1-7-1': 'T11071', '1-7-2': 'T11072', '1-7-3': 'T11073', '1-7-4': 'T11074',
        '1-8-1': 'T11081', '1-8-2': 'T11082', '1-8-3': 'T11083', '1-8-4': 'T11084',
        '1-9-1': 'T11091', '1-9-2': 'T11092', '1-9-3': 'T11093', '1-9-4': 'T11094',
        '1-10-1': 'T11101', '1-10-2': 'T11102', '1-10-3': 'T11103', '1-10-4': 'T11104',
        '2-1-1': 'T12011', '2-1-2': 'T12012', '2-1-3': 'T12013', '2-1-4': 'T12014',
        '2-2-1': 'T12021', '2-2-2': 'T12022', '2-2-3': 'T12023', '2-2-4': 'T12024',
        '2-3-1': 'T12031', '2-3-2': 'T12032', '2-3-3': 'T12033', '2-3-4': 'T12034',
        '2-4-1': 'T12041', '2-4-2': 'T12042', '2-4-3': 'T12043', '2-4-4': 'T12044',
        '2-5-1': 'T12051', '2-5-2': 'T12052', '2-5-3': 'T12053', '2-5-4': 'T12054',
        '2-6-1': 'T12061', '2-6-2': 'T12062', '2-6-3': 'T12063', '2-6-4': 'T12064',
        '2-7-1': 'T12071', '2-7-2': 'T12072', '2-7-3': 'T12073', '2-7-4': 'T12074',
        '2-8-1': 'T12081', '2-8-2': 'T12082', '2-8-3': 'T12083', '2-8-4': 'T12084',
        '2-9-1': 'T12091', '2-9-2': 'T12092', '2-9-3': 'T12093', '2-9-4': 'T12094',
        '2-10-1': 'T12101', '2-10-2': 'T12102', '2-10-3': 'T12103', '2-10-4': 'T12104',
        '3-1-1': 'T41011', '3-1-2': 'T41012', '3-1-3': 'T41013', '3-1-4': 'T41014',
        '3-2-1': 'T41021', '3-2-2': 'T41022', '3-2-3': 'T41023', '3-2-4': 'T41024',
        '3-3-1': 'T41031', '3-3-2': 'T41032', '3-3-3': 'T41033', '3-3-4': 'T41034',
        '3-4-1': 'T41041', '3-4-2': 'T41042', '3-4-3': 'T41043', '3-4-4': 'T41044',
        '3-5-1': 'T41051', '3-5-2': 'T41052', '3-5-3': 'T41053', '3-5-4': 'T41054',
        '3-6-1': 'T41061', '3-6-2': 'T41062', '3-6-3': 'T41063', '3-6-4': 'T41064',
        '3-7-1': 'T41071', '3-7-2': 'T41072', '3-7-3': 'T41073', '3-7-4': 'T41074',
        '3-8-1': 'T41081', '3-8-2': 'T41082', '3-8-3': 'T41083', '3-8-4': 'T41084',
        '3-9-1': 'T41091', '3-9-2': 'T41092', '3-9-3': 'T41093', '3-9-4': 'T41094',
        '3-10-1': 'T41101', '3-10-2': 'T41102', '3-10-3': 'T41103', '3-10-4': 'T41104',
        '4-1-1': 'T42011', '4-1-2': 'T42012', '4-1-3': 'T42013', '4-1-4': 'T42014',
        '4-2-1': 'T42021', '4-2-2': 'T42022', '4-2-3': 'T42023', '4-2-4': 'T42024',
        '4-3-1': 'T42031', '4-3-2': 'T42032', '4-3-3': 'T42033', '4-3-4': 'T42034',
        '4-4-1': 'T42041', '4-4-2': 'T42042', '4-4-3': 'T42043', '4-4-4': 'T42044',
        '4-5-1': 'T42051', '4-5-2': 'T42052', '4-5-3': 'T42053', '4-5-4': 'T42054',
        '4-6-1': 'T42061', '4-6-2': 'T42062', '4-6-3': 'T42063', '4-6-4': 'T42064',
        '4-7-1': 'T42071', '4-7-2': 'T42072', '4-7-3': 'T42073', '4-7-4': 'T42074',
        '4-8-1': 'T42081', '4-8-2': 'T42082', '4-8-3': 'T42083', '4-8-4': 'T42084',
        '4-9-1': 'T42091', '4-9-2': 'T42092', '4-9-3': 'T42093', '4-9-4': 'T42094',
        '4-10-1': 'T42101', '4-10-2': 'T42102', '4-10-3': 'T42103', '4-10-4': 'T42104',
    }


    new_result = new_result.rename(columns=column_renames) # column_renames에 기재된대로 열 이름을 수정한다.



    # 원래 '출발지/목적지'였던 'M00000' 열의 데이터도 column_renames의 이름으로 변경 (O-D Matrix의 경우 맨 첫 번째 열과 맨 첫 번째 행이 동일)
    if 'M00000' in new_result.columns:
        new_result['M00000'] = new_result['M00000'].replace(column_renames)


    return new_result